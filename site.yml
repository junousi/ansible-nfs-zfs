---
- name: Build ZFS, encrypt a dataset, backup dataset with S3 compatible API
  hosts: all
  become: true
  tasks:
    - name: Install package dependencies
      apt:
        name: "{{ item }}"
        update_cache: yes
      with_items:
        - "{{ pkg_dependencies }}"

    - name: Clone and build spl
      shell: git clone https://github.com/zfsonlinux/spl; cd spl; git checkout master; ./autogen.sh; ./configure; make; make install
      args:
        creates: /usr/local/sbin/splat
    - name: Clone and build zfs
      shell: git clone https://github.com/zfsonlinux/zfs; cd zfs; git checkout master; ./autogen.sh; ./configure --prefix=/usr; make; make install
      args:
        creates: /usr/sbin/zpool
    - name: Clone and build zfs automatic snapshots
      shell: git clone https://github.com/zfsonlinux/zfs-auto-snapshot; cd zfs-auto-snapshot; make install
      args:
        creates: /usr/sbin/zfs-auto-snapshot

    - name: Check presence of ZFS module
      shell: modinfo zfs
      register: modinfo_zfs
    - name: Load ZFS modules from extra
      shell: "cd /lib/modules/{{ ansible_kernel }}/extra; insmod {{ item }}"
      with_items: 
        - "{{ zfs_modules }}"
      ignore_errors: true
      when: modinfo_zfs.rc != 0

    - name: Create ZFS pool
      shell: zpool create tank {{ zpool_device }}
      args:
        creates: /tank
    - name: Enable encryption on zpool
      shell: zpool set feature@encryption=enabled tank
    - name: Inject ZFS dataset encryption key
      copy: 
        content: "{{ zfs_key }}"
        dest: "{{ zfs_key_location }}"
        owner: root
        group: root
        mode: 0600
    - name: Create ZFS dataset with encryption
      shell: 'zfs create -o encryption=aes-256-gcm -o keyformat=hex -o keylocation=file://{{ zfs_key_location }} -o sharenfs="rw=@{{ openstack_project_subnet }}" tank/nfs'
      args:
        creates: /tank/nfs

    - name: Install z3
      pip:
        name: z3
    - name: Create z3 configuration directory
      file:
        path: /etc/z3_backup
        state: directory
        mode: 0600
    - name: Create z3 configuration file
      template: 
        src: templates/z3.conf.j2
        dest: /etc/z3_backup/z3.conf
        owner: root
        group: root
        mode: 0600

# ZFS Encryption at Rest configuration is carried in dataset properties.
# The dataset properties are included only when issuing zfs send -p.
# Let's force -p to all send operations.
    - name: Enable zfs send with properties
      shell: sed -i "s/zfs send -i/zfs send -p -i/" /usr/local/lib/python2.7/dist-packages/z3/snap.py
    - shell: sed -i "s/zfs send -n/zfs send -p -n/" /usr/local/lib/python2.7/dist-packages/z3/snap.py
    - shell: sed -i "s/zfs send '/zfs send -p '/" /usr/local/lib/python2.7/dist-packages/z3/snap.py

# Unfortunately using -p also yields following bug/issue:
#
# https://github.com/zfsonlinux/zfs/issues/5341
#
# As a result, "z3 restore" back to the old dataset may not work in all scenarios. 
# For these cases, "z3_get" to a dedicated recovery dataset should do the trick:
#
# z3_get s3-prefix/tank/nfs@zfs-auto-snap_xyz | pigz -d | zfs recv tank/recovery
